apiVersion: v1
kind: PersistentVolume
metadata:
  name: efs-pv
spec:
  capacity:
    storage: 10Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  storageClassName: efs-sc
  csi:
    driver: efs.csi.aws.com
    volumeHandle: {{ .Values.postgres.efsId}}
---
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: efs-sc
provisioner: efs.csi.aws.com
parameters:
  provisioningMode: efs-ap
  fileSystemId: {{ .Values.postgres.efsId}}
  directoryPerms: "777"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ .Values.postgres.name }}-pvc
  namespace: {{ .Release.Namespace }}
  labels:
    name: {{ .Values.postgres.name }}-pvc
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: efs-sc
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.postgres.name }}-svc
  namespace: {{ .Release.Namespace }}
  labels:
    name: {{ .Values.postgres.name }}-svc
spec:
  type: NodePort
  ports:
  - port: {{ .Values.postgres.ports.postgres.port }}
    targetPort: {{ .Values.postgres.ports.postgres.targetPort }}
    nodePort: {{ .Values.postgres.ports.postgres.nodePort }}
  selector:
    name: {{ .Values.postgres.name }}-pod
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: database-configuration-files
  namespace: {{ .Release.Namespace }}
  labels:
    name: database-configuration-files
data:
  01-init-create-books-table.sql: {{ .Files.Get "files/postgres/01-init-create-books-table.sql" | quote}}
  100-init-insert-books-table.sql: {{ .Files.Get "files/postgres/100-init-insert-books-table.sql" | quote}}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.postgres.name }}-deployment
  namespace: {{ .Release.Namespace }}
  labels:
    name: {{ .Values.postgres.name }}-deployment
spec:
  replicas: {{ .Values.replicasCount }}
  selector:
    matchLabels:
      name: {{ .Values.postgres.name }}-pod
  template:
    metadata:
      labels:
        name: {{ .Values.postgres.name }}-pod
    spec:
      containers:
      - name: {{ .Values.postgres.name }}-container
        image: {{ .Values.postgres.image }}
        ports:
        - containerPort: {{ .Values.postgres.ports.postgres.targetPort }}
        env:
        - name: POSTGRES_USER
          value: {{ .Values.postgres.user }}
        - name: POSTGRES_PASSWORD
          value: {{ .Values.postgres.secret }}
        - name: POSTGRES_DB
          value: {{ .Values.postgres.db }}
        volumeMounts:
        - name: {{ .Values.postgres.name }}-volume
          mountPath: /var/lib/postgresql/data
        - name: database-configuration-files
          mountPath: /docker-entrypoint-initdb.d
      volumes:
      - name: {{ .Values.postgres.name }}-volume
        persistentVolumeClaim:
          claimName: {{ .Values.postgres.name }}-pvc
      - name: database-configuration-files
        configMap:
          name: database-configuration-files
          items:
          - key: 01-init-create-books-table.sql
            path: 01-init-create-books-table.sql
          - key: 100-init-insert-books-table.sql
            path: 100-init-insert-books-table.sql
# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: {{ .Values.postgres.name }}
#   namespace: {{ .Release.Namespace }}
#   labels:
#     name: {{ .Values.postgres.name }}
# spec:
#   type: NodePort
#   ports:
#   - port: {{ .Values.postgres.ports.postgres.port }}
#     targetPort: {{ .Values.postgres.ports.postgres.targetPort }}
#     nodePort: 30003