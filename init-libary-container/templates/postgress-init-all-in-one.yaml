apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: database
  namespace: backend
  labels:
    name: database
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: standard
---
apiVersion: v1
kind: Service
metadata:
  name: database
  namespace: backend
  labels:
    name: database
spec:
  ports:
  - port: 5432
    targetPort: 5432
  selector:
    name: database
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: database-configuration-files
  namespace: backend
  labels:
    name: database-configuration-files
data:
  01-init-create-books-table.sql: {{ .Files.Get "files/postgres/01-init-create-books-table.sql" | quote}}
  100-init-insert-books-table.sql: {{ .Files.Get "files/postgres/100-init-insert-books-table.sql" | quote}}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: database
  namespace: backend
  labels:
    name: database
spec:
  replicas: {{ .Values.replicasCount }}
  selector:
    matchLabels:
      name: database
  template:
    metadata:
      labels:
        name: database
    spec:
      containers:
      - name: database
        image: postgres:latest
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_USER
          value: libary
        - name: POSTGRES_PASSWORD
          value: secret
        - name: POSTGRES_DB
          value: libary
        volumeMounts:
        - name: database
          mountPath: /var/lib/postgresql/data
        - name: database-configuration-files
          mountPath: /docker-entrypoint-initdb.d
      volumes:
      - name: database
        persistentVolumeClaim:
          claimName: database
      - name: database-configuration-files
        configMap:
          name: database-configuration-files
          items:
          - key: 01-init-create-books-table.sql
            path: 01-init-create-books-table.sql
          - key: 100-init-insert-books-table.sql
            path: 100-init-insert-books-table.sql